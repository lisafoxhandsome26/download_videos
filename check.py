import os
import re

user_path = 'E:\downloads youtubefdf'
res = os.path.exists(user_path)
print(res)


def audio_redactor(file_mp3_path, title_name, time_line: list):
    title_name = ''.join(re.split(r'[.;!:?*,()[@$%&-~|/-]', title_name))
    os.mkdir(title_name)
    time_line_quantity = len(time_line)
    now = 0
    for line in time_line:
        now += 1
        print(f"{'-' * 50}\nCreate audio #{line['title']}\n"
              f"Please wait....\nPROCESS {now}/{time_line_quantity}\n{'-' * 50}")
        try:
            endSec = int(line["end_time"])
            startSec = int(line["start_time"])
            file_name_to = line["title"]
            file_name_to = ''.join(re.split(r'[\\~|/]', file_name_to))
            startTime =startSec * 1000
            endTime = endSec * 1000
            song = AudioSegment.from_mp3(file_mp3_path)
            extract = song[startTime:endTime]
            dir = r'E:\downloads youtube' # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
            extract.export(dir + f'\{file_name_to}.mp3', format="mp3")
            path = dir + f'\{title_name}'
            print(f'{"-" * 50}\n#{line["title"]} Created\n{"-" * 50}')
        except Exception as ex:
            print(f"{'-' * 50}\n –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {file_mp3_path}\n {ex} \n{'-' * 50}")
    os.remove('audioDownload.mp3')
    return path


def convert_wav_mp3(input_file, output_file):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ WAV –≤ MP3.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º WAV-—Ñ–∞–π–ª
        audio_file = AudioSegment.from_wav(input_file)

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±–∏—Ç—Ä–µ–π—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä '192k'
        audio_file.export(output_file, format="mp3", bitrate="320k")

        print(f"–§–∞–π–ª '{input_file}' —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ '{output_file}'! üéâ")
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{input_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω. ‚ùå")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} ‚ùå")

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è


def extract_audio(video_path, audio_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª.

    :param video_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
    :param audio_path: –ü—É—Ç—å, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª. pydub –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç.
        video = AudioSegment.from_file(video_path)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫.
        audio = video.set_channels(2) # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–µ—Ä–µ–æ

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ MP3 –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.
        audio.export(audio_path, format="mp3")

        print(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {audio_path} üéâ")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e} ‚ùå")


def download(url):
    ydl_opts = {
         'format': 'bestvideo+bestaudio/best',
         'outtmpl': '%(title)s.%(ext)s',
         'noplaylist': True,
    }

    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        #ydl.download([url])

        info_dict = ydl.extract_info(url, download=False)
        audio_title = info_dict.get("title", None)
        audio_time_line = info_dict.get("chapters", None)
        print(f'{"-" * 50}\nDownload audio Successfully!\n{"-" * 50}')
        extract_audio("–ú—É–∑—ã–∫–∞ the best.mp4", "–ú—É–∑—ã–∫–∞ the best audio.mp3")
    return '–ú—É–∑—ã–∫–∞ the best audio.mp3', audio_title, audio_time_line